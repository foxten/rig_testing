---
import BaseLayout from "@/layouts/BaseLayout.astro";
import storyJson from "@/data/TheHighRepublic.json";
---

<BaseLayout title={storyJson.Title}>
  <p>
    src:

    <a
      href="https://docs.google.com/document/d/1DmmALZdL6pDFtugtzwSx-soTSIJT5rcyw3iqB9tYzV8/edit"
      target="_blank"
    >
      https://docs.google.com/document/d/1DmmALZdL6pDFtugtzwSx-soTSIJT5rcyw3iqB9tYzV8/edit</a
    >
  </p>

  <!-- Basic Markdown -->
  <section class="c-prose -story">
    <h1>{storyJson.Title}</h1>
    <p>{storyJson.Intro}</p>
  </section>

  <!-- Scrollytelling example -->
  <section id="scrolly">
    <p>Scrollytelling:</p>
    <figure>
      <p>Inital Scrolly</p>
    </figure>

    <article>
      {
        storyJson.body.map((ele, i) => {
          return (
            <p class="step" data-step={i + 1}>
              {ele.value}
            </p>
          );
        })
      }
    </article>
  </section>
</BaseLayout>

<!-- 
    The following is a basic example from the scrollama package:
    https://github.com/russellsamora/scrollama
    Code from here:
    https://github.com/russellsamora/scrollama/blob/main/docs/sticky-overlay/index.html
-->

<script is:inline src="https://unpkg.com/d3@5.9.1/dist/d3.min.js"></script>
<script is:inline src="https://unpkg.com/scrollama"></script>
<script is:inline>
// using d3 for convenience
var main = d3.select("main");
var scrolly = main.select("#scrolly");
var figure = scrolly.select("figure");
var article = scrolly.select("article");
var step = article.selectAll(".step");

// initialize the scrollama
var scroller = scrollama();

// generic window resize listener event
function handleResize() {
  // 1. update height of step elements
  var stepH = Math.floor(window.innerHeight * 0.75);
  step.style("height", stepH + "px");

  var figureHeight = window.innerHeight / 2;
  var figureMarginTop = (window.innerHeight - figureHeight) / 2;

  figure
    .style("height", figureHeight + "px")
    .style("top", figureMarginTop + "px");

  // 3. tell scrollama to update new element dimensions
  scroller.resize();
}

// scrollama event handlers
function handleStepEnter(response) {
  console.log(response);
  // response = { element, direction, index }

  // add color to current step only
  step.classed("is-active", function (d, i) {
    return i === response.index;
  });

  // update graphic based on step
  figure.select("p").text(response.index + 1);
}

function init() {
  // 1. force a resize on load to ensure proper dimensions are sent to scrollama
  handleResize();

  // 2. setup the scroller passing options
  // 		this will also initialize trigger observations
  // 3. bind scrollama event handlers (this can be chained like below)
  scroller
    .setup({
      step: "#scrolly article .step",
      offset: 0.33,
      debug: false,
    })
    .onStepEnter(handleStepEnter);
}

// kick things off
init();
</script>

<style>
  #scrolly {
    position: relative;
    padding: 1rem;
  }

  article {
    position: relative;
    padding: 0;
    max-width: 20rem;
    margin: 0 auto;
  }

  figure {
    position: -webkit-sticky;
    position: sticky;
    left: 0;
    width: 100%;
    margin: 0;
    -webkit-transform: translate3d(0, 0, 0);
    -moz-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    background-color: #8a8a8a;
    z-index: 0;
  }

  figure p {
    text-align: center;
    padding: 1rem;
    position: absolute;
    top: 50%;
    left: 50%;
    -moz-transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    font-size: 8rem;
    font-weight: 900;
    color: #fff;
  }

  .step {
    margin: 0 auto 2rem auto;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
  }

  .step:last-child {
    margin-bottom: 0;
  }

  .step.is-active p {
    background-color: goldenrod;
    color: #3b3b3b;
  }

  .step p {
    text-align: center;
    padding: 1rem;
    font-size: 1.5rem;
    background-color: #3b3b3b;
  }
</style>
